
aspx page:
==========
<table>
  <tr>
      <td class="row form-inline" style="width: 100%; justify-content: center">
          <asp:LinkButton ID="btnSave" runat="server" Text="Save" CausesValidation="false" OnClick="btnSave_Click" class="btn btn-primary" /> <asp:LinkButton ID="btnSaveWait" runat="server" Text="Please Wait..." CausesValidation="false" OnClick="btnSave_Click" Style="display: none;" class="btn btn-primary" />
          <asp:LinkButton ID="btnDone" runat="server" Text="Done" CausesValidation="false" OnClick="btnDone_Click" class="btn btn-success" /><asp:LinkButton ID="btnDoneWait" runat="server" Text="Please Wait..." CausesValidation="false" OnClick="btnDone_Click"  Style="display: none;" class="btn btn-success" />
      </td>
  </tr>
</table>
                                             
                                             
                                             
aspx.cs On Page Load method:
============================

protected void Page_Load(object sender, EventArgs e)
{

  if (!IsPostBack)
  {
      InitializeControls();
  }
}

private void InitializeControls()
{
    btnSave.Attributes.Add("onclick", "javascript:ShowPleaseWait('" + btnSave.ClientID + "','" + btnSaveWait.ClientID + "')");
    btnDone.Attributes.Add("onclick", "javascript:ShowPleaseWait('" + btnDone.ClientID + "','" + btnDoneWait.ClientID + "')");
}

BasePage.cs (This will be inherited by all pages)
=================================================


        /// <summary>
        /// Show please wait text on group of controls
        /// </summary>
        /// <param name="otherControlIDs"></param>
        public static void ShowPleaseWait(params Button[] otherControlIDs)
        {
            string otherCtrlIDs = string.Empty;
            foreach (Button btn in otherControlIDs)
            {
                //Get list of button's ClientID apart from the button which has raised event.
                var otherIDs = otherControlIDs.Where(b => b.ID != btn.ID).Select(b => b.ClientID);
                otherCtrlIDs = string.Join(",", otherIDs.ToArray());
                btn.OnClientClick = "setEventControlId(this.id,'" + otherCtrlIDs + "');";
            }
        }

        public static void ShowPleaseWaitLink(params LinkButton[] otherControlIDs)
        {
            string otherCtrlIDs = string.Empty;
            foreach (LinkButton btn in otherControlIDs)
            {
                //Get list of button's ClientID apart from the button which has raised event.
                var otherIDs = otherControlIDs.Where(b => b.ID != btn.ID).Select(b => b.ClientID);
                otherCtrlIDs = string.Join(",", otherIDs.ToArray());
                btn.OnClientClick = "setLinkEventControlId(this.id,'" + otherCtrlIDs + "');";
            }
        }

        /// <summary>
        /// Use this function to show please wait on button which are not in UpdatePanel.
        /// </summary>
        /// <param name="otherControlIDs"></param>
        public void ShowPleaseWaitNonAJAX(params Button[] otherControlIDs)
        {
            String script = String.Empty;
            string otherCtrlIDs = string.Empty;

            foreach (Button btn in otherControlIDs)
            {
                var otherIDs = otherControlIDs.Where(b => b.ID != btn.ID).Select(b => b.ClientID);
                otherCtrlIDs = string.Join(",", otherIDs.ToArray());

                btn.OnClientClick = "showPlzWaitNoAJAX(this.id,'" + otherCtrlIDs + "')";
                script += "addLoadEvent(revertBackPleaseWaitNoAJAX('" + btn.ClientID + "','" + otherCtrlIDs + "'));";

                var plzWaitBtn = btn.Parent.FindControl(btn.ClientID + "_PlzWait") as Button;
                if (plzWaitBtn != null)
                {
                    plzWaitBtn.CssClass = "btn_plzwait";
                }
            }

            string clientID = otherControlIDs != null && otherControlIDs.Count() > 0 ? otherControlIDs.First().ClientID : Page.ClientID;

            if (!String.IsNullOrEmpty(script))
            {
                ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), (clientID + "_PlzWaitOSUP"), script, true);
            }
        }

        public void ShowPleaseWaitNoUp(params Button[] otherControlIDs)
        {
            String script = "$(document).ready(function () {";
            string otherCtrlIDs = string.Empty;

            foreach (Button btn in otherControlIDs)
            {
                var otherIDs = otherControlIDs.Where(b => b.ID != btn.ID).Select(b => b.ClientID);
                otherCtrlIDs = string.Join(",", otherIDs.ToArray());

                btn.OnClientClick = "showPlzWaitNoAJAX(this.id,'" + otherCtrlIDs + "')";
            }

            script += "});";

            string clientID = otherControlIDs != null && otherControlIDs.Count() > 0 ? otherControlIDs.First().ClientID : Page.ClientID;

            if (!String.IsNullOrEmpty(script))
            {
                Page.ClientScript.RegisterStartupScript(this.Page.GetType(), (clientID + "_PlzWaitNoAjax"), script, true);
            }
        }


Javacript:
==========


//This function will be called once the request has been end by PageRequestManager
function endReq(sender, args) {

    if ($.trim(_btnControlID) == $.trim(sender._postBackSettings.sourceElement.id)) {
        //Enable control which has raised event
        if (sender._postBackSettings.sourceElement.id.length > 0) {
            enableButtonCss(sender._postBackSettings.sourceElement.id);
            //console.log("enabled from end");
            $('#' + sender._postBackSettings.sourceElement.id).val(_btnText);
        }
    }
    if ($.trim(_linkControlID) == $.trim(sender._postBackSettings.sourceElement.id)) {
        //Enable control which has raised event
        if (sender._postBackSettings.sourceElement.id.length > 0) {
            enableLinkButtonCss(sender._postBackSettings.sourceElement.id);
            //console.log("enabled from end");
            $('#' + sender._postBackSettings.sourceElement.id).val(_linkText);
        }
    }
    if (sender._postBackSettings.sourceElement.id.length > 0)
        $.data($('#' + sender._postBackSettings.sourceElement.id), "PlzWaitCtrl", "false")
    //Enable other related controls
    if (_otherControlIDs.length > 0) {
        if (_otherControlIDs.length > 0) {
            var otherCtrls = _otherControlIDs.split(',');

            $(otherCtrls).each(function (index, ele) {
                enableButtonCss(ele);
                enableLinkButtonCss(ele);
                $('#' + ele).removeAttr('disabled');
            });
        }
        _otherControlIDs = '';
    }
}

//This function will be called on button click event.
function setEventControlId(ctrlID, otherControlIDs) {

    _btnControlID = ctrlID;
    //Apply disable button css to other related controls
    if ($.trim(otherControlIDs).length > 0) {
        _otherControlIDs = otherControlIDs;
    }
    return true;
}

function setLinkEventControlId(ctrlID, otherControlIDs) {

    _linkControlID = ctrlID;
    //Apply disable button css to other related controls
    if ($.trim(otherControlIDs).length > 0) {
        _otherControlIDs = otherControlIDs;
    }
    return true;
}


Javacript(Full Version All other functionality/ Optional):
==========================================================

///// Verify the login details
//function ValidateLogin(LoginID, PwdID, SubmitID, ImgPlzWaitID, ResultID) {
//    var userName = document.getElementById(LoginID);
//    var passID = document.getElementById(PwdID);
//    var loginButonID = document.getElementById(SubmitID);
//    var plzWaitID = document.getElementById(ImgPlzWaitID);

//    // Check whether user entered User Name/PWD   
//    if (TrimAll(userName.value).length == 0
//            && TrimAll(passID.value).length == 0) {
//        document.getElementById(ResultID).value = "0";
//        alert("Please supply the following:\r\n\r\nUser Name is required.  \r\nPassword is required.");
//    }
//    else if (TrimAll(userName.value).length == 0
//                && TrimAll(passID.value).length != 0) {
//        /// Not entered user name
//        document.getElementById(ResultID).value = "0";
//        alert("Please supply the following:\r\n\r\nUser Name is required.");

//    }
//    else if (TrimAll(userName.value).length != 0
//                && TrimAll(passID.value).length == 0) {
//        /// Not entered password
//        document.getElementById(ResultID).value = "0";
//        alert("Please supply the following:\r\n\r\nPassword is required.");

//    }
//    else if (TrimAll(userName.value).length < 6 || TrimAll(userName.value).length > 15
//                || TrimAll(passID.value).length < 6 || TrimAll(passID.value).length > 15) {
//        var error = '';
//        document.getElementById(ResultID).value = "0";
//        /// Logon ID not between 6-15 characters.
//        if (TrimAll(userName.value).length < 6 || TrimAll(userName.value).length > 15) {
//            error = "Invalid Login: User Name should be between 6-15 characters.";
//        }
//        if (TrimAll(passID.value).length < 6 || TrimAll(passID.value).length > 15) {
//            error += "\r\nInvalid Password: Password should be between 6-15 characters.";
//        }
//        alert(error);
//    }
//    else {
//        /// valid case             
//        document.getElementById(ResultID).value = "1";
//        plzWaitID.style.display = "inline";
//        loginButonID.style.display = "none";
//    }
//}

/// Show the Upload Progress bar for file upload
function UploadClick(SubmitID, ProgressBarID, FileID) {
    var btnID = document.getElementById(SubmitID);
    var barID = document.getElementById(ProgressBarID);
    var upFileID = document.getElementById(FileID);

    /// Check whether the value contains any EXE and if the value is there or not
    if (TrimAll(upFileID.value).length != 0 &&
            TrimAll(upFileID.value).toUpperCase().indexOf(".EXE") == -1) {
        barID.style.display = 'inline';
    }
}

/// Used to Trim the string 
function TrimAll(sString) {
    while (sString.substring(0, 1) == ' ') {
        sString = sString.substring(1, sString.length);
    }

    while (sString.substring(sString.length - 1, sString.length) == ' ') {
        sString = sString.substring(0, sString.length - 1);
    }

    return sString;
}

/// returns the Current Clock Time
function ShowClockTime(todaysDate) {
    var currentTime = null;

    // Calculate the Hours
    if (todaysDate.getHours() == 0) {
        // it reflects 12:00 AM
        currentTime = 12;
    }
    else if (todaysDate.getHours() >= 13) {
        // it reflects PM
        currentTime = todaysDate.getHours() - 12;
    }
    else {
        // it reflects AM other than 12:00 AM
        currentTime = todaysDate.getHours();
    }

    // Calculate the Minutes
    if (todaysDate.getMinutes() < 10) {
        currentTime += ":0" + todaysDate.getMinutes();
    }
    else {
        currentTime += ":" + todaysDate.getMinutes();
    }

    // Calculate AM/ PM
    if (todaysDate.getHours() >= 12)
        currentTime += " PM";
    else
        currentTime += " AM";

    return currentTime;
}


/// Verifies the Time Out check on the web portal
function timeoutCheck() {
    var hiddenTimer = document.getElementById('hfTimer');
    hiddenTimer.value = parseInt(hiddenTimer.value) + 60;

    if (parseInt(hiddenTimer.value) > maxTime) {
        var thisdate = new Date();
        alert('Your session will time out in 5 minutes due to inactivity.  Click OK to continue with your work. (' + ShowClockTime(thisdate) + ')');
        hiddenTimer.value = 0;

        var hiddenField = document.getElementById('hfTimeoutTrigger');
        hiddenField.value = thisdate.getTime();
        __doPostBack('hfTimeoutTrigger', '');
        window.setTimeout("timeoutCheck();", 60000);
    }
    else {
        window.setTimeout("timeoutCheck();", 60000);
    }
}


/// Shows the Field Message Div 
function ShowFlgMsg(DivControlID) {
    var divID = document.getElementById(DivControlID);
    divID.style.display = "inline";
}

/// Hides the Field Message Div 
function HideFlgMsg(DivControlID) {
    var divID = document.getElementById(DivControlID);
    divID.style.display = "none";
}

/// replaces . with blank for Amount control
function ValidateAmountValue(AmountID) {
    var amtID = document.getElementById(AmountID);

    if (null != amtID) {
        var num = amtID.value;

        if (TrimAll(num).length > 0) {
            num = num.replace(".", "");
            num = num.replace("-", "");
        }

        amtID.value = num;
    }
}

/// Formats the Currency
function formatCurrency(AmountID) {
    var amtID = document.getElementById(AmountID);

    if (null != amtID) {
        var num = amtID.value;

        if (TrimAll(num).length > 0) {
            num = num.toString().replace(/\$|\,/g, '');

            if (isNaN(num))
                num = "0";

            sign = (num == (num = Math.abs(num)));
            num = Math.floor(num * 100 + 0.50000000001);
            cents = num % 100;
            num = Math.floor(num / 100).toString();

            if (cents < 10)
                cents = "0" + cents;

            for (var i = 0; i < Math.floor((num.length - (1 + i)) / 3) ; i++)
                num = num.substring(0, num.length - (4 * i + 3)) + ',' +
                            num.substring(num.length - (4 * i + 3));

            //amtID.value = (((sign) ? '' : '-') + '$' + num + '.' + cents);
            amtID.value = num;
        }
    }
}


/// Formats the Currency: Allows Negative Amounts
function formatCurrencyAllowNegative(AmountID) {
    var amtID = document.getElementById(AmountID);

    if (null != amtID) {
        var num = amtID.value;

        if (TrimAll(num).length > 0) {
            num = num.toString().replace(/\$|\,/g, '');

            if (isNaN(num))
                num = "0";

            sign = (num == (num = Math.abs(num)));
            num = Math.floor(num * 100 + 0.50000000001);
            cents = num % 100;
            num = Math.floor(num / 100).toString();

            if (cents < 10)
                cents = "0" + cents;

            for (var i = 0; i < Math.floor((num.length - (1 + i)) / 3) ; i++)
                num = num.substring(0, num.length - (4 * i + 3)) + ',' +
                            num.substring(num.length - (4 * i + 3));

            amtID.value = (((sign) ? '' : '-') + num);
        }
    }
}

// Read Control Scroll Position to maintain on Postbacks
function GetScrollPosition(ControlID) {
    var strCook = document.cookie;
    if (strCook.indexOf("!~") != 0) {
        var intS = strCook.indexOf("!~");
        var intE = strCook.indexOf("~!");
        var strPos = strCook.substring(intS + 2, intE);

        var ctl = document.getElementById(ControlID);

        if (ctl != null) ctl.scrollTop = strPos;
    }
}

// Save Control Scroll Position      
function SetScrollPosition(ControlID) {
    var intY = document.getElementById(ControlID).scrollTop;

    document.cookie = "yPos=!~" + intY + "~!";
}


/// Show JS Confrimation pop-up
function confirmSubmit(MessageText) {
    var agree = confirm(MessageText);

    if (agree)
        return true;
    else
        return false;
}

/// Used for Auto Tab to next field
function Tab(currentField, nextField) {
    if (currentField.value.length == currentField.maxLength) {
        nextField.select();
        nextField.focus();
    }
}


/// Used to show the Progress Bar on the Upload Screen
function ShowProgressBar() {
    var imgID = document.getElementById(ProcessingImgID);
    var UploadMsgID = document.getElementById(FileUploadMessageID);
    var UploadID = TrimAll(document.getElementById(FileUploadID).value);

    if (UploadID.length != 0) {
        UploadMsgID.style.display = "none";
        imgID.style.display = "inline";
        imgID.src = "../../Images/en/ProcessingImg.gif";
    }
}

/// Handles the browser close - WORKS only in IE
function HandleClose(event) {
    var e = event;
    if (window.event.clientY < 0 && window.event.clientY < -80) {
        var xmlhttp;
        xmlhttp = new XMLHttpRequest();
        xmlhttp.open("GET", "/Signout.aspx", false);
        xmlhttp.send();
    }
}

/*
This function should be calleed on Header CheckBox click event
@Param chkHead - Header Checkbox Object reference (DOM Object reference)
@Param chkItemName - ID of Item CheckBox e.g. for <asp:CheckBox ID="chkItem" .... the value id 'chkItem'
*/
function checkAll(chkHead, chkItemName) {
    var elements = document.getElementsByTagName('input');
    if (elements != null && elements.length > 0) {
        for (var count = 0; count < elements.length; count++) {
            var ele = elements[count];
            if (ele.type == "checkbox" && ele.id.indexOf(chkItemName) > -1) {
                ele.checked = chkHead.checked;
            }
        }
    }
}

/*
This function should be calleed on Header CheckBox click event
@Param chkHeadName - ID of Header CheckBox e.g. for <asp:CheckBox ID="chkHead" .... the value id 'chkHead'
@Param chkItemName - ID of Item CheckBox e.g. for <asp:CheckBox ID="chkItem" .... the value id 'chkItem'
*/
function checkHead(chkHeadName, chkItemName) {
    var elements = document.getElementsByTagName('input');
    var headChk;
    var allChecked = true;
    if (elements != null && elements.length > 0) {
        for (var count = 0; count < elements.length; count++) {
            var ele = elements[count];

            if (ele.type == "checkbox") {
                if (ele.id.indexOf(chkHeadName) > -1) {
                    headChk = ele;
                } else if (ele.id.indexOf(chkItemName) > -1 && !ele.checked) {
                    allChecked = false;
                    break;
                }
            }
        } //End for
        if (allChecked && headChk != undefined) {
            headChk.checked = true;
        } else {
            headChk.checked = false;
        }
    }
}

function addLoadEvent(func) {
    var oldonload = window.onload;
    if (typeof window.onload != 'function') {
        window.onload = func;
    } else {
        window.onload = function () {
            if (oldonload) {
                oldonload();
            }
            func();
        }
    }
}
addLoadEvent(disableToReadonly);

function disableToReadonly() {
    //TEXTBOXES            
    var elements = document.getElementsByTagName('input');
    if (elements != null && elements.length > 0) {
        for (var count = 0; count < elements.length; count++) {
            if (elements[count].type == "text") {
                makeDisableToReadonly(elements[count]);
            }
        } //End for
    }
    //TEXTAREAS            
    var textareas = document.getElementsByTagName('textarea');
    for (var count1 = 0; count1 < textareas.length; count1++) {
        makeDisableToReadonly(textareas[count1]);
    } //End for
}

function makeDisableToReadonly(ele) {
    if (ele.disabled == true) {
        ele.readOnly = true;
    }
}

/*********** PLease Wait: Start ***********/

var _otherControlIDs = '';
var _btnText = '';
var _linkText = '';
var _linkWidth = '';
var _btnControlID = '';
var _linkControlID = '';

//This function will be called once the request has been initialize by PageRequestManager
function initReq(sender, args) {
    //console.log("Init called");
    var prm = Sys.WebForms.PageRequestManager.getInstance();
    if (prm.get_isInAsyncPostBack()) {//request will be aborted since previous postback has not been finished
        args.set_cancel(true);
        //console.log("Aborted");
    } else {
        //Code here will execte for request which will go to server.
    }
}

//This function will be called once the request has been begin by PageRequestManager
function beginReq(sender, args) {

    if ($.trim(_btnControlID) == $.trim(args.get_postBackElement().id)) {
        //Disable control which has raised event
        disableButtonCss(args.get_postBackElement().id);

        if (args.get_postBackElement().id.length > 0) {
            _btnText = $('#' + args.get_postBackElement().id).val();
            $('#' + args.get_postBackElement().id).val("Please Wait...");
        }

        //Disable other related control 
        if (_otherControlIDs.length > 0) {
            var otherCtrls = _otherControlIDs.split(',');

            $(otherCtrls).each(function (index, ele) {
                $('#' + ele).attr('disabled', 'disabled');
                disableButtonCss(ele);
            });
        }
    }

    if ($.trim(_linkControlID) == $.trim(args.get_postBackElement().id)) {
        //Disable control which has raised event
        disableLinkButtonCss(args.get_postBackElement().id);

        if (args.get_postBackElement().id.length > 0) {
            _linkText = $('#' + args.get_postBackElement().id)[0].innerHTML;
            $('#' + args.get_postBackElement().id)[0].innerHTML = "<i class=\"fa fa-spinner fa-spin\"></i>";
        }

        //Disable other related control 
        if (_otherControlIDs.length > 0) {
            var otherCtrls = _otherControlIDs.split(',');

            $(otherCtrls).each(function (index, ele) {
                $('#' + ele).attr('disabled', 'disabled');
                disableLinkButtonCss(ele);
            });
        }
    }
}

//This function will be called once the request has been end by PageRequestManager
function endReq(sender, args) {

    if ($.trim(_btnControlID) == $.trim(sender._postBackSettings.sourceElement.id)) {
        //Enable control which has raised event
        if (sender._postBackSettings.sourceElement.id.length > 0) {
            enableButtonCss(sender._postBackSettings.sourceElement.id);
            //console.log("enabled from end");
            $('#' + sender._postBackSettings.sourceElement.id).val(_btnText);
        }
    }
    if ($.trim(_linkControlID) == $.trim(sender._postBackSettings.sourceElement.id)) {
        //Enable control which has raised event
        if (sender._postBackSettings.sourceElement.id.length > 0) {
            enableLinkButtonCss(sender._postBackSettings.sourceElement.id);
            //console.log("enabled from end");
            $('#' + sender._postBackSettings.sourceElement.id).val(_linkText);
        }
    }
    if (sender._postBackSettings.sourceElement.id.length > 0)
        $.data($('#' + sender._postBackSettings.sourceElement.id), "PlzWaitCtrl", "false")
    //Enable other related controls
    if (_otherControlIDs.length > 0) {
        if (_otherControlIDs.length > 0) {
            var otherCtrls = _otherControlIDs.split(',');

            $(otherCtrls).each(function (index, ele) {
                enableButtonCss(ele);
                enableLinkButtonCss(ele);
                $('#' + ele).removeAttr('disabled');
            });
        }
        _otherControlIDs = '';
    }
}

//This function will be called on button click event.
function setEventControlId(ctrlID, otherControlIDs) {

    _btnControlID = ctrlID;
    //Apply disable button css to other related controls
    if ($.trim(otherControlIDs).length > 0) {
        _otherControlIDs = otherControlIDs;
    }
    return true;
}

function setLinkEventControlId(ctrlID, otherControlIDs) {

    _linkControlID = ctrlID;
    //Apply disable button css to other related controls
    if ($.trim(otherControlIDs).length > 0) {
        _otherControlIDs = otherControlIDs;
    }
    return true;
}




//Apply enable control CSS
function enableButtonCss(ctrlID) {
    if (ctrlID.length > 0 && $('#' + ctrlID).hasClass("btn-disabled")) {
        $('#' + ctrlID).removeClass("btn-disabled");
        $('#' + ctrlID).addClass("btn");
        $('#' + ctrlID).removeAttr('disabled');
    }
}

//Apply Disable control CSS
function disableButtonCss(ctrlID) {

    if (ctrlID.length > 0 && $('#' + ctrlID).hasClass("btn")) {
        $('#' + ctrlID).removeClass("btn");
        $('#' + ctrlID).addClass("btn-disabled");
        $('#' + ctrlID).attr('disabled', 'disabled');
    }

}

function enableLinkButtonCss(ctrlID) {
    //if ($('#' + ctrlID).hasClass("btnLink-disabled")) {
    //    $('#' + ctrlID).removeClass("btnLink-disabled");
    //    $('#' + ctrlID).addClass("btnLink");
    //    $('#' + ctrlID).removeAttr('disabled');
    //}
    if (ctrlID.length > 0 && $('#' + ctrlID).hasClass("btn-disabled")) {
        $('#' + ctrlID).removeClass("btn-disabled");
        $('#' + ctrlID).removeAttr('disabled');
    }
}

//Apply Disable control CSS
function disableLinkButtonCss(ctrlID) {
    //if ($('#' + ctrlID).hasClass("btnLink")) {
    //    $('#' + ctrlID).removeClass("btnLink");
    //    $('#' + ctrlID).addClass("btnLink-disabled");
    //    $('#' + ctrlID).attr('disabled', 'disabled');
    //}
    if (ctrlID.length > 0) {
        $('#' + ctrlID).addClass("btn-disabled");
        $('#' + ctrlID).attr('disabled', 'disabled');
    }
}

/*********** PLease Wait: End ***********/



/*********** PLease Wait No Update Panel: Start ***********/

function showPlzWaitNoAJAX(btnId, otherCtrlIDs) {
    $('#' + btnId).hide();
    $('#' + btnId + '_PlzWait').show();

    if ($.trim($('#' + btnId + '_PlzWait').val()).length == 0) {
        $('#' + btnId + '_PlzWait').val("Please Wait...");
    }

    if ($.trim(otherCtrlIDs).length > 0) {
        var otherCtrls = otherCtrlIDs.split(',');
        $(otherCtrls).each(function (index, ele) {
            disableButtonNoAJAX(ele);
        });
    }
}

//Apply Disable control CSS
function disableButtonNoAJAX(ctrlID) {
    $('#' + ctrlID).attr('disabled', 'disabled');
    $('#' + ctrlID).removeClass("btn");
    $('#' + ctrlID).addClass("btn-disabled");

}

function enableButtonNoAJAX(ctrlID) {
    $('#' + ctrlID).removeClass("btn-disabled")
    $('#' + ctrlID).addClass("btn")
    $('#' + ctrlID).removeAttr('disabled');
}

function revertBackPleaseWaitNoAJAX(btnId, otherCtrlIDs) {
    setTimeout(function () {
        $('#' + btnId).show();
        $('#' + btnId + '_PlzWait').hide();

        if ($.trim(otherCtrlIDs).length > 0) {
            var otherCtrls = otherCtrlIDs.split(',');
            $(otherCtrls).each(function (index, ele) {
                enableButtonNoAJAX(ele);
            });
        }
    }, 10000);
}


/*********** PLease Wait No Update Panel: End ***********/


/// Show the Please Wait icon on click action
function ShowPleaseWait(ButtonID, ImgPlzWaitID) {
    var imgButonID = document.getElementById(ButtonID);
    var plzWaitID = document.getElementById(ImgPlzWaitID);
    alert('Hello');
    if (null != plzWaitID && null != imgButonID) {
        plzWaitID.style.display = "inline";
        imgButonID.style.display = "none";
    }
}

